<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>聪明的投资者</title>
    <url>/2020/07/21/%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85/</url>
    <content><![CDATA[<ul>
<li><a href="#聪明的投资者">聪明的投资者</a></li>
<li><a href="#投资与投机">投资与投机</a></li>
<li><a href="#防御型投资者">防御型投资者</a></li>
<li><a href="#激进型投资者">激进型投资者</a></li>
</ul>
<h1 id="聪明的投资者"><a href="#聪明的投资者" class="headerlink" title="聪明的投资者"></a>聪明的投资者</h1><ul>
<li>特征：耐心、约束、学习能力、驾驭情绪、自我反思。</li>
<li>关键：性格，而非智力。</li>
</ul>
<h1 id="投资与投机"><a href="#投资与投机" class="headerlink" title="投资与投机"></a>投资与投机</h1><ul>
<li>投资：以深入分析为基础，在保证本金安全的情况下，追求适当回报。</li>
<li>投机：不满足上述投资定义的业务。</li>
<li>关键：<ul>
<li>投机就是投机，别认为是投资，也不要太认真，更不要投入过多（10%）。</li>
<li>永远不要把投资账户与投机账户混淆。</li>
<li>永远不要在思想上将投资与投机混淆。</li>
<li>永远不要使投机账户的金额超过10%。</li>
</ul>
</li>
</ul>
<h1 id="防御型投资者"><a href="#防御型投资者" class="headerlink" title="防御型投资者"></a>防御型投资者</h1><ul>
<li>定义：关心资金安全的同时不想花过多时间和精力的人。</li>
<li>投资策略：将资金按一定比例投资债券和股票两种证券，每种证券占比在 25% 至 75% 之间，按收益率动态平衡投入比例。</li>
<li>收益目标：防御型投资者难以获得超出平均数的收益。</li>
<li>互补做法：<ul>
<li>购入投资基金的股份，类似与代理自己进行实际投资操作。</li>
<li>购入信托基金或将资金交由专业投资咨询公司代理投资。</li>
<li>美元成本平均法，即每月或每季度投入等额资金购买股票。</li>
</ul>
</li>
</ul>
<h1 id="激进型投资者"><a href="#激进型投资者" class="headerlink" title="激进型投资者"></a>激进型投资者</h1><ul>
<li>关键：区分何种行动方针能提供合理的成功机会、何种行动方针无法成功。</li>
</ul>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>金融</tag>
        <tag>投资</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>BodyParam 注解</title>
    <url>/2020/07/21/BodyParam%20%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<ul>
<li><a href="#需求概述">需求概述</a></li>
<li><a href="#背景说明">背景说明</a></li>
<li><a href="#设计方案">设计方案</a></li>
<li><a href="#具体实现">具体实现</a></li>
<li><a href="#遇到问题">遇到问题</a><ul>
<li><a href="#问题">问题</a></li>
<li><a href="#解法">解法</a></li>
</ul>
</li>
<li><a href="#改进实现">改进实现</a></li>
<li><a href="#参考文章">参考文章</a></li>
</ul>
<h1 id="需求概述"><a href="#需求概述" class="headerlink" title="需求概述"></a>需求概述</h1><p>在控制器方法签名中，直接通过变量名获取 POST 请求体中的参数。</p>
<h1 id="背景说明"><a href="#背景说明" class="headerlink" title="背景说明"></a>背景说明</h1><p>在 SpringMVC 框架下，控制器方法想获取 POST 请求体，一般只能使用 @RequestBody 注解，常规使用方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式 1：注解 + Map</span></span><br><span class="line"><span class="comment">// 注意：Map 实际从请求 Json 体转换而来，其中各键对应 Json 体中各字段。</span></span><br><span class="line"><span class="meta">@PostMapping</span>(...)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(@RequestBody Map&lt;String, Object&gt; map)</span> </span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式 2：注解 + 对象</span></span><br><span class="line"><span class="comment">// 注意：这里 Params 是专门针对请求参数自定义的类型，内部各成员对应了请求 Json 体中各字段。</span></span><br><span class="line"><span class="meta">@PostMapping</span>(...)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">create</span><span class="params">(@RequestBody Params params)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>上述两种方式相对都比较繁琐：</p>
<ul>
<li>第一种方式从 Map 中利用字符串类型的键获取值对象，并需要主动转换为目标格式，被动跳过编译期检查而带来隐患。</li>
<li>第二种方式需要专门定义请求参数类，当统一控制器中各方法的参数个数、类型、名称各不相同时需要创建很多参数类，使得后期维护成本较高。</li>
</ul>
<p>有没有办法能直接从请求 Json 体中获取某一或某几字段的值，并自动转换为目标格式呢？使用方式类似 @RequestParam：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(...)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">query</span><span class="params">(@RequestParam String p1, </span></span></span><br><span class="line"><span class="function"><span class="params">                    @RequestParam Object p2, </span></span></span><br><span class="line"><span class="function"><span class="params">                    @RequestParam Params p3)</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>可惜 @RequestParam 只能应用在 URL 参数或 form 形式的请求体上，对 Json 格式的请求体无能为力。</p>
<h1 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h1><ul>
<li>注解：以 @RequestParam 为蓝本，自定义注解 @BodyParam，它同样应用在方法参数上，代表该参数是从请求体中抽取、解析得到的。</li>
<li>解析：定义注解解析器 BodyParamResolver，该解析器继承自 HandlerMethodArgumentResolver，Spring 框架会在传入方法参数前、解析方法参数时调用它，利用它来解析得到期望的参数值。</li>
</ul>
<h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><blockquote>
<p>BodyParam.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.PARAMETER)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> BodyParam &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>BodyParamResolver.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BodyParamResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> parameter.getParameterAnnotation(BodyParam<span class="class">.<span class="keyword">class</span>) !</span>= <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  NativeWebRequest webRequest,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  WebDataBinderFactory binderFactory)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String name = getParamName(parameter);</span><br><span class="line">        String body = readNativeBody(webRequest);</span><br><span class="line">        <span class="keyword">return</span> parse(parameter, name, body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getParamName</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        String name = parameter.getParameterAnnotation(BodyParam<span class="class">.<span class="keyword">class</span>).<span class="title">value</span>()</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">            name = parameter.getParameterName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">readNativeBody</span><span class="params">(NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpServletRequest req = webRequest.getNativeRequest(</span><br><span class="line">                HttpServletRequest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次获取的流对象都不同，所以要使用变量保存，避免在循环中重复调用 get 方法。</span></span><br><span class="line">        <span class="comment">// 至于为什么流对象每次会变，可参看后面遇到的问题及解法。</span></span><br><span class="line">        BufferedReader r = req.getReader();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">char</span>[] buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = r.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            sb.append(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">parse</span><span class="params">(MethodParameter parameter, String name, String body)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; type = parameter.getParameterType();</span><br><span class="line">        JsonNode node = JsonUtils.parse(body).get(name);</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span> || node <span class="keyword">instanceof</span> NullNode) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JsonUtils.parse(node, type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>applicationContext-mvc.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:argument-resolvers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.sankuai.hulk.nodemanager.api.standard.BodyParamResolver"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:argument-resolvers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>每个参数解析时都要重新读取请求体、解析 Json，但是 HttpServletRequest 默认数据流在首次输出结束后即被关闭，也就是只有第一个参数会被解析出来，其他参数都没法获取到。<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2></li>
</ul>
<ol>
<li>创建可以多次读取请求体的新请求类型 MultiReadHttpServletRequest，在初始化该请求时即从 HttpServletRequest 读取一次请求体并保存到本地，以后外部服务每次要获取数据流时都返回一个新的流对象。</li>
<li>为了应用新请求类型，需要定义一个 Filter 负责将原始 HttpServletRequest 替换为包装后的新请求，该 Filter 优先级较低，要在其他 Filter 完成对请求的修饰、处理后再执行。</li>
</ol>
<h1 id="改进实现"><a href="#改进实现" class="headerlink" title="改进实现"></a>改进实现</h1><blockquote>
<p>MultiReadHttpServletRequest.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiReadHttpServletRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] body;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultiReadHttpServletRequest</span><span class="params">(HttpServletRequest req)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(req);</span><br><span class="line">        <span class="keyword">this</span>.body = IOUtils.toByteArray(req.getInputStream());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意：不要缓存输入流，每次返回新的流对象，多次获取才不会冲突。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletInputStream <span class="title">getInputStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InputStream(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedReader <span class="title">getReader</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(getInputStream(),</span><br><span class="line">                getCharacterEncoding()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStream</span> <span class="keyword">extends</span> <span class="title">ServletInputStream</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ByteArrayInputStream inner;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InputStream</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> </span>&#123;</span><br><span class="line">            inner = <span class="keyword">new</span> ByteArrayInputStream(bytes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> inner.read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>MultiReadRequestFilter.java</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiReadRequestFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        chain.doFilter(<span class="keyword">new</span> MultiReadHttpServletRequest(</span><br><span class="line">                (HttpServletRequest) request), response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>web.xml</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MultiReadRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.sankuai.hulk.nodemanager.api.standard.MultiReadRequestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>MultiReadRequestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li><a href="https://javacfox.github.io/2019/06/28/%E5%AE%9E%E7%8E%B0HttpServletRequest-getInputStream%E5%A4%9A%E6%AC%A1%E8%AF%BB%E5%8F%96/" target="_blank" rel="noopener">实现 HttpServletRequest.getInputStream 多次读取</a></li>
<li><a href="https://stackoverflow.com/questions/10210645/http-servlet-request-lose-params-from-post-body-after-read-it-once/17129256#17129256" target="_blank" rel="noopener">Http Servlet request lose params from POST body after read it once</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
        <category>Java</category>
        <category>工具设计</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>注解</tag>
        <tag>实现</tag>
      </tags>
  </entry>
  <entry>
    <title>VS Code 使用技巧</title>
    <url>/2020/08/06/VS%20Code%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ul>
<li><a href="#修改默认语言支持">修改默认语言支持</a><ul>
<li><a href="#需求">需求</a></li>
<li><a href="#方法">方法</a></li>
<li><a href="#参考">参考</a></li>
</ul>
</li>
</ul>
<h2 id="修改默认语言支持"><a href="#修改默认语言支持" class="headerlink" title="修改默认语言支持"></a>修改默认语言支持</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>VS Code 默认将新建的匿名文件视为普通文本格式，我希望它能直接以 Markdown 格式解析。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol>
<li><p>临时方案：针对当前文件</p>
<ul>
<li>打开全局查询（F1）</li>
<li>找到 <code>Change Language Mode</code> 选项</li>
<li>选择目标格式 <code>Markdown</code></li>
<li>注意：打开 <code>Change Language Mode</code> 项的快捷键为 <em>cmd&amp;k -&gt; m</em></li>
</ul>
</li>
<li><p>长期方案：修改默认配置</p>
<ul>
<li>打开 <code>User Settings</code></li>
<li>修改 <code>files.defaultLanguage</code> 项的值为 <code>markdown</code></li>
</ul>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/35904221/change-vscode-default-language-for-new-files" target="_blank" rel="noopener">Change VsCode default language</a></li>
</ul>
]]></content>
      <categories>
        <category>日常应用</category>
        <category>编辑工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>VS Code</tag>
        <tag>技巧</tag>
        <tag>编辑</tag>
      </tags>
  </entry>
  <entry>
    <title>Mockito 使用入门</title>
    <url>/2020/08/18/Mockito%20%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<ul>
<li><a href="#基础入门">基础入门</a></li>
<li><a href="#应用进阶">应用进阶</a></li>
<li><a href="#官方文档">官方文档</a></li>
<li><a href="#接口文档">接口文档</a></li>
<li><a href="#常见问题">常见问题</a></li>
</ul>
<h1 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h1><ul>
<li><a href="https://www.tutorialspoint.com/mockito/index.htm" target="_blank" rel="noopener">Learn Mockito</a></li>
</ul>
<h1 id="应用进阶"><a href="#应用进阶" class="headerlink" title="应用进阶"></a>应用进阶</h1><ul>
<li><a href="https://www.baeldung.com/mockito-series" target="_blank" rel="noopener">Mockito Tutorial Series</a></li>
</ul>
<h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><ul>
<li><a href="https://github.com/mockito/mockito/wiki" target="_blank" rel="noopener">Mockito Github Home</a></li>
</ul>
<h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><ul>
<li><a href="https://javadoc.io/static/org.mockito/mockito-core/3.5.0/org/mockito/Mockito.html" target="_blank" rel="noopener">Mockito Core JavaDoc</a></li>
</ul>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol>
<li><p>怎样联合使用 <code>@RunWith(SpringJunit4ClassRunner.class)</code> 和 <code>@RunWith(MockitoJunitRunner.class)</code> ？</p>
<p>目前无法联合使用，如果强行在父类加 Spring 注解，并在子类加 Mockito 注解，可能导致由 Spring 主动注入的 Bean 没有完成初始化。</p>
<p>解决方案：在 <code>@Before</code> 方法中执行 <code>MockitoAnnotations.init(this)</code> 主动初始化测试类中各 Mockito 注解。</p>
<p>参考：</p>
<ul>
<li><a href="https://stackoverflow.com/questions/24431427/multiple-runwith-statements-in-junit" target="_blank" rel="noopener">Multiple RunWith Statements in JUnit</a></li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>开发技术</category>
        <category>Java</category>
        <category>工具应用</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>应用</tag>
        <tag>入门</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>怎样测试私有方法</title>
    <url>/2020/08/18/%E6%80%8E%E6%A0%B7%E6%B5%8B%E8%AF%95%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li><a href="#背景">背景</a></li>
<li><a href="#解法">解法</a></li>
<li><a href="#思考">思考</a></li>
<li><a href="#参考">参考</a></li>
</ul>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>对定时任务一类的功能，通常对象对外只有一个方法，在该方法内可能执行非常复杂的操作，优秀的编码者会将这种复杂方法拆分为多个私有子方法的组合。</p>
<p>这样虽然能保证代码结构的清晰、易读，但没法对私有方法做单元测试，直接测试复杂方法又难以保证各种情况都覆盖到，因此需要考虑是否有合理的方式能直接测试私有方法。</p>
<h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><ol>
<li>不测试私有方法（推荐）。<ul>
<li>可以合理设计测试用例，保证只测试公共方法就能覆盖期望的各种场景。</li>
<li>如果仍需测试私有方法，可以重新衡量其是否为通用型方法，尝试将它重构为工具类中的公共方法。</li>
<li>尝试让私有子方法只包含功能逻辑，将业务逻辑收敛到主方法中，从而降低或消除对私有方法单独测试的必要性。</li>
</ul>
</li>
<li>将私有（private）方法改为包可见方法（package）。<ul>
<li>让 test 代码目录下的测试类所在包与被测类所在包同名，这样测试类就能看见并使用被测类的包可见性方法。</li>
<li>不同可见性代表不同的作用范围，进而代表方法的不同用途和目的，只因为要方便测试就改变方法可见性不太能让人接受。</li>
</ul>
</li>
<li>使用嵌套代理类。<ul>
<li>在源类内部构建包可见的嵌套类（nested class），嵌套类中各方法与外部源类的私有方法一一对应，功能实现上则只是调用外部类对应方法，即该嵌套类代理了外部类的私有方法。</li>
<li>该方案的缺点是凭空多构建了一个嵌套类，增加理解和维护难度，同时嵌套类也容易被用于测试外的用途。</li>
</ul>
</li>
<li>利用反射。<ul>
<li>JUnit 提供了 PrivilegedAccessor 等通过反射方式获取、测试私有方法的工具。</li>
<li>反射方式是最灵活但同时也是最不可靠的，当私有方法因故被删除或方法签名有改动时，用户无法通过 IDE 对测试用例做联动更改，也不能在编译期间提前收到警告或异常；另外，反射方式下的代码可读性也比较差，不利于长期维护。</li>
</ul>
</li>
</ol>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>我认为方案一是相对合理的，首先就要想办法避免测试私有方法，一是合理设计测试用例，另外也要思考方法设计上是否合理，是否存在可以改善的 Code Smell。</p>
<p>如果一定要测试，优先考虑方案三，虽然多加了一个嵌套类，但后期理解和维护会方便很多，而且 Idea 等 IDE 似乎也提供了便捷的标识性注解，在别的类使用了这些仅用来测试的嵌套类时 IDE 会给出异常提示。</p>
<p>其次是方案四，最后是方案二，原则是尽量避免修改方法原有逻辑。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.artima.com/suiterunner/private.html" target="_blank" rel="noopener">Testing Private Methods with JUnit and SuiteRunner</a></li>
<li><a href="https://softwareengineering.stackexchange.com/questions/375860/how-to-avoid-the-need-to-unit-test-private-methods" target="_blank" rel="noopener">How to avoid the need to Unit test private methods</a></li>
<li><a href="https://softwareengineering.stackexchange.com/questions/100959/how-do-you-unit-test-private-methods" target="_blank" rel="noopener">How do you unit test private methods</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
        <category>Java</category>
        <category>编程思想</category>
      </categories>
      <tags>
        <tag>测试</tag>
        <tag>私有方法</tag>
        <tag>思想</tag>
      </tags>
  </entry>
  <entry>
    <title>Hive 使用注意</title>
    <url>/2020/08/31/Hive%20%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</url>
    <content><![CDATA[<ul>
<li><a href="#number-与-null-比较结果总为-false">Number 与 NULL 比较结果总为 false</a><ul>
<li><a href="#说明">说明</a></li>
<li><a href="#参考">参考</a></li>
</ul>
</li>
</ul>
<h2 id="Number-与-NULL-比较结果总为-false"><a href="#Number-与-NULL-比较结果总为-false" class="headerlink" title="Number 与 NULL 比较结果总为 false"></a>Number 与 NULL 比较结果总为 false</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>不同类型的值做比较时，Hive 默认先进行类型转换，具体转换规则参考官方文档：<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+Types#LanguageManualTypes-NumericTypes" target="_blank" rel="noopener">Hive Data Types</a>。</p>
<p>需要关注的是 <code>Number</code> 类型与 <code>NULL</code> 值比较或 <code>Number</code> 类型与 <code>Non-Number</code> 类型比较时，比较结果总是 <code>NULL</code>，也就等同与 <code>false</code>。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://stackoverflow.com/questions/50849151/what-happens-when-compare-string-to-int-in-hive" target="_blank" rel="noopener">What happens when compare string to int in hive?</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
        <category>Data</category>
        <category>Hive</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>应用</tag>
        <tag>Hive</tag>
        <tag>注意</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 使用技巧</title>
    <url>/2020/09/01/Vim%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<ul>
<li><a href="#编辑技巧">编辑技巧</a><ul>
<li><a href="#如何改变大小写">如何改变大小写？</a></li>
<li><a href="#如何将内容复制到系统剪切板">如何将内容复制到系统剪切板？</a></li>
</ul>
</li>
<li><a href="#替换技巧">替换技巧</a><ul>
<li><a href="#如何实现零宽断言">如何实现零宽断言？</a></li>
</ul>
</li>
<li><a href="#重复操作">重复操作</a><ul>
<li><a href="#如何录制宏macro">如何录制宏（Macro）？</a></li>
</ul>
</li>
</ul>
<h1 id="编辑技巧"><a href="#编辑技巧" class="headerlink" title="编辑技巧"></a>编辑技巧</h1><h2 id="如何改变大小写？"><a href="#如何改变大小写？" class="headerlink" title="如何改变大小写？"></a>如何改变大小写？</h2><ol>
<li>可视化模式选中目标。</li>
<li><code>gu</code>：将目标变为小写；<code>gU</code>：将目标变为大写。</li>
</ol>
<h2 id="如何将内容复制到系统剪切板？"><a href="#如何将内容复制到系统剪切板？" class="headerlink" title="如何将内容复制到系统剪切板？"></a>如何将内容复制到系统剪切板？</h2><ol>
<li>在常规模式或可视化模式下选中要复制的内容。</li>
<li>输入命令 <code>&quot;*y</code>，内容会直接复制到系统剪切板，同 <code>Ctrl+C</code> 复制操作效果相同，同样可以使用 <code>Ctrl+V</code> 粘贴。<ol>
<li>命令中的引号（”）用来选择寄存器。</li>
<li>命令中的星号（*）表示系统寄存器。</li>
<li>命令中的字符（y）即复制操作 <code>yank</code>。</li>
</ol>
</li>
<li>寄存器更多香瓜内容记录在：<a href="/2020/10/20/Vim%20%E5%AF%84%E5%AD%98%E5%99%A8/" title="Vim 寄存器">Vim 寄存器</a>。</li>
</ol>
<h1 id="替换技巧"><a href="#替换技巧" class="headerlink" title="替换技巧"></a>替换技巧</h1><h2 id="如何实现零宽断言？"><a href="#如何实现零宽断言？" class="headerlink" title="如何实现零宽断言？"></a>如何实现零宽断言？</h2><p>Vim 的零宽断言规范与常用正则规范不同，具体如下：<br>|     |前向|后向|<br>|:—:|:—:|:—:|<br>|<strong>肯定</strong>| <code>(atom)\@&lt;=</code> | <code>(atom)\@=</code> |<br>|<strong>否定</strong>| <code>(atom)\@&lt;!</code> | <code>(atom)\@!</code> |</p>
<ul>
<li><p>注意</p>
<ul>
<li>在实际应用中，<code>(atom)</code> 左右的括号需要加反斜杠转义，即最终形式 <code>\(atom\)</code>，原因是 Vim 默认将括号等计为常规字符，转义后才具有功能特性。</li>
</ul>
</li>
<li><p>参考</p>
<ul>
<li><a href="https://vim.fandom.com/wiki/Regex_lookahead_and_lookbehind" target="_blank" rel="noopener">Regex lookahead and lookbehind</a></li>
</ul>
</li>
</ul>
<h1 id="重复操作"><a href="#重复操作" class="headerlink" title="重复操作"></a>重复操作</h1><h2 id="如何录制宏（Macro）？"><a href="#如何录制宏（Macro）？" class="headerlink" title="如何录制宏（Macro）？"></a>如何录制宏（Macro）？</h2><p>流程示例：<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">qa    &#x2F;&#x2F; 开始录制，其中 a 代表寄存器序号，可选值 [a-zA-Z0-9]</span><br><span class="line">...   &#x2F;&#x2F; 录制中：一系列实际操作</span><br><span class="line">q     &#x2F;&#x2F; 结束录制</span><br><span class="line">@a    &#x2F;&#x2F; 运行一次 a 寄存器内宏操作</span><br><span class="line">@@    &#x2F;&#x2F; 重复运行上次宏操作</span><br></pre></td></tr></table></figure></p>
<ul>
<li>参考<ul>
<li><a href="https://www.cnblogs.com/ini_always/archive/2011/09/21/2184446.html" target="_blank" rel="noopener">Vim 重复操作的宏录制</a></li>
<li><a href="https://vim.fandom.com/wiki/Macros" target="_blank" rel="noopener">Vim Macros Tutorial</a></li>
<li><a href="https://vimhelp.org/repeat.txt.html#complex-repeat" target="_blank" rel="noopener">Vim Help: complex-repeat</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>日常应用</category>
        <category>编辑工具</category>
      </categories>
      <tags>
        <tag>技巧</tag>
        <tag>Vim</tag>
        <tag>编辑器</tag>
        <tag>使用</tag>
      </tags>
  </entry>
  <entry>
    <title>勿要滥用 Optional</title>
    <url>/2020/10/15/%E5%8B%BF%E8%A6%81%E6%BB%A5%E7%94%A8%20Optional/</url>
    <content><![CDATA[<ul>
<li><a href="#optional-个人理解">Optional 个人理解</a></li>
<li><a href="#optional-滥用问题">Optional 滥用问题</a><ul>
<li><a href="#滥用表现">滥用表现</a></li>
<li><a href="#解决思路">解决思路</a></li>
</ul>
</li>
<li><a href="#参考">参考</a></li>
</ul>
<h1 id="Optional-个人理解"><a href="#Optional-个人理解" class="headerlink" title="Optional 个人理解"></a>Optional 个人理解</h1><p>Optional 是 Java 语言从 JDK8 版本开始提供的一种容器类，它可以承接、包裹任意类型的对象（包括 null），并在其上提供 getter 方法及 null 值处理方法。</p>
<p>个人理解，Optional 主要解决两方面问题：</p>
<ol>
<li>解决传统工程中 null 值判断过于频繁所造成处理逻辑繁复的问题。</li>
<li>解决分散在工程各处的、隐藏的 NullPointerException 异常频发的问题。</li>
</ol>
<h1 id="Optional-滥用问题"><a href="#Optional-滥用问题" class="headerlink" title="Optional 滥用问题"></a>Optional 滥用问题</h1><h2 id="滥用表现"><a href="#滥用表现" class="headerlink" title="滥用表现"></a>滥用表现</h2><ol>
<li>类中声明 Optional 类型成员变量。</li>
<li>方法中声明 Optional 类型参数。</li>
<li>私有方法声明 Optional 类型返回值。</li>
<li>所有 getter 类型方法都声明 Optional 类型返回值。</li>
<li>本应返回非 null 对象的业务处理方法声明了一个 Optional 类型返回值。</li>
</ol>
<h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>要理解为什么上述几种使用方式属于滥用，不仅要清楚 Optional 的功能和用法，更要理清 Optional 在代码中展现的或显然或隐含的含义：  </p>
<ul>
<li>接口方法返回了 Optional 对象时，我们可以认为接口提供方明确声明该接口可能返回无效（null）结果，如何应对就交由调用方来决策。</li>
<li>接口方法返回非 Optional 对象时，我们认为接口提供方隐性声明该接口仅会返回有效（非 null）结果，验证和保障结果有效性的能力由方法或承载类来提供。<ul>
<li>保障 getter 类型方法不会返回 null：在构造函数或成员 setter 方法中就对传入的参数做 null 检测，提前抛出 NPE。</li>
<li>保障业务处理方法不会返回 null：处理逻辑执行结束后、返回结果前做 null 检测。</li>
</ul>
</li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户认证信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserIdentifyInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String idNumber; <span class="comment">// 身份证号，不会是 null</span></span><br><span class="line">    <span class="keyword">private</span> String userName; <span class="comment">// 用户名，不会是 null</span></span><br><span class="line">    <span class="keyword">private</span> String address;  <span class="comment">// 住址，可能是 null</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserIdentifyInfo</span><span class="params">(String idNumber, String userName, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = Preconditions.checkNotNull(idNumber);</span><br><span class="line">        <span class="keyword">this</span>.userName = Preconditions.checkNotNull(userName);</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdNumber</span><span class="params">(String idNumber)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idNumber = Preconditions.checkNotNull(idNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.idNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = Preconditions.checkNotNull(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(<span class="keyword">this</span>.address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户认证服务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserIdentifyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Optional&lt;String&gt; <span class="title">findUserById</span><span class="params">(String idNumber)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 业务逻辑代码</span></span><br><span class="line">        String userName = ...;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(userName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综上可以看出，仅涉及对外交互的接口返回 Optional 才有意义，这也是 1、2、3 点属于滥用的原因。<br>不过针对第三点（私有方法返回 Optional）可以根据实际场景适当放宽限定，比如为实现更优雅的流式调用，可以让部分细粒度、业务逻辑简单的 private 方法也返回 Optional。  </p>
<p>即使是对外交互接口，也要看业务逻辑是否支持返回 Optional，如果结果不是可选而是必需的，在方法内抛出异常更合理。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener">Optional</a></li>
<li><a href="https://blog.joda.org/2015/08/java-se-8-optional-pragmatic-approach.html" target="_blank" rel="noopener">Java SE 8 Optional, a pragmatic approach</a></li>
<li><a href="https://nipafx.dev/intention-revealing-code-java-8-optional#" target="_blank" rel="noopener">Intention Revealing Code With Optional</a></li>
<li><a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type" target="_blank" rel="noopener">Should Java 8 getters return optional type?</a></li>
<li><a href="https://dzone.com/articles/using-optional-correctly-is-not-optional" target="_blank" rel="noopener">26 Reasons Why Using Optional Correctly Is Not Optional</a></li>
</ul>
]]></content>
      <categories>
        <category>开发技术</category>
        <category>Java</category>
        <category>语言技巧</category>
      </categories>
      <tags>
        <tag>Optional</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ARTS 初衷</title>
    <url>/2020/10/19/ARTS%20%E5%88%9D%E8%A1%B7/</url>
    <content><![CDATA[<ul>
<li><a href="#初衷">初衷</a></li>
<li><a href="#规则">规则</a><ul>
<li><a href="#a---algorithm">A - Algorithm</a></li>
<li><a href="#r---review">R - Review</a></li>
<li><a href="#t---tip">T - Tip</a></li>
<li><a href="#s---share">S - Share</a></li>
<li><a href="#其他">其他</a></li>
</ul>
</li>
<li><a href="#参考">参考</a></li>
</ul>
<h1 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h1><ul>
<li>从源头获取第一手知识。</li>
<li>主动学习，主动思考。</li>
<li>知识多样化。</li>
<li>学习有计划。</li>
</ul>
<p><img src="%E5%AD%A6%E4%B9%A0%E9%87%91%E5%AD%97%E5%A1%94.jpg" alt="学习金字塔"></p>
<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><h2 id="A-Algorithm"><a href="#A-Algorithm" class="headerlink" title="A - Algorithm"></a>A - Algorithm</h2><ul>
<li>说明：即算法，可以解决一道新的算法题目，也可以为旧的题目找到更优的解决方案。</li>
<li>目的：编程练习，算法学习。</li>
</ul>
<h2 id="R-Review"><a href="#R-Review" class="headerlink" title="R - Review"></a>R - Review</h2><ul>
<li>说明：即文章，阅读并点评一篇优秀的英文文章，可以是技术文也可以是休闲文、科普文。</li>
<li>目的：提高英文水平。</li>
</ul>
<h2 id="T-Tip"><a href="#T-Tip" class="headerlink" title="T - Tip"></a>T - Tip</h2><ul>
<li>说明：即技巧，学习或记录一个技术技巧、知识点滴。</li>
<li>目的：总结归纳知识，长期来看以点带面。</li>
</ul>
<h2 id="S-Share"><a href="#S-Share" class="headerlink" title="S - Share"></a>S - Share</h2><ul>
<li>说明：即分享，分享一篇有观点、有思考的文章，不拘文章类型。</li>
<li>目的：主动思考，建立影响力，输出价值观。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>以周维度产出 ARTS 成果。</li>
<li>技巧点可以扩展成知识面，需要另开目录输出系列内容。</li>
<li>每周 ARTS 题目格式：<code>${周一日期}-${年第几周}</code>，示例“2020-10-12（第 42 周）”。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.zhihu.com/question/301150832" target="_blank" rel="noopener">极客时间《左耳听风》发起的ARTS挑战怎么参加？</a></li>
</ul>
]]></content>
      <categories>
        <category>日积月累</category>
        <category>ARTS</category>
      </categories>
      <tags>
        <tag>ARTS</tag>
        <tag>长期</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 寄存器</title>
    <url>/2020/10/20/Vim%20%E5%AF%84%E5%AD%98%E5%99%A8/</url>
    <content><![CDATA[<ul>
<li><a href="#使用">使用</a></li>
<li><a href="#说明">说明</a><ul>
<li><a href="#常用">常用</a></li>
<li><a href="#少用">少用</a></li>
</ul>
</li>
<li><a href="#参考">参考</a></li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol start="0">
<li>选中目标内容</li>
<li>复制：<code>&quot;ay</code></li>
<li>粘贴：<code>&quot;ap</code></li>
</ol>
<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><ul>
<li>匿名寄存器（”）<ul>
<li>通过字符删除命令 <code>d</code>、<code>x</code>、<code>c</code>、<code>s</code> 删除的内容会被自动加载到该寄存器中。</li>
</ul>
</li>
<li>编号寄存器（0-9）<ul>
<li>0 保存了最近拷贝的内容，1-9 依次保存时间上由近到远每次删除的内容。</li>
<li>仅按行删除的内容会保存到 1-9 中。</li>
<li>调用寄存器执行拷贝操作（例如 <code>&quot;ay</code>）时，内容不会放入 0 内。</li>
</ul>
</li>
<li>命名寄存器（a-z）<ul>
<li>共 26 个寄存器，主动指定时才会被使用，通常用来记录宏。</li>
</ul>
</li>
<li>剪切板寄存器（*、+、~）<ul>
<li>与系统剪切板关联，写入该寄存器的内容可以通过 <code>Ctrl-V</code> 等方式粘贴。</li>
</ul>
</li>
</ul>
<h2 id="少用"><a href="#少用" class="headerlink" title="少用"></a>少用</h2><ul>
<li>删除寄存器（-）<ul>
<li>行内删除而非整行删除时，被删掉的内容会自动放入该寄存器中。</li>
<li>调用寄存器执行删除操作（例如 <code>&quot;ad</code>）时，内容不会放入 - 内。</li>
</ul>
</li>
<li>只读寄存器（:、.、%）<ul>
<li>3 个寄存器不允许用户主动修改。</li>
<li>% 中保存当前文件名。</li>
<li>. 中保存上次插入模式下写入的字符内容。</li>
<li>: 中保存上次命令模式下键入的命令内容，通过 <code>@:</code> 可以再次执行该命令。</li>
</ul>
</li>
<li>黑洞寄存器（_）<ul>
<li>写入到该寄存器的内容会直接丢弃，使用它的目的是不影响其他寄存器内容。</li>
</ul>
</li>
<li>表达式寄存器（=）<ul>
<li>该寄存器用于执行计算表达式并输出结果，不用做存储场景。</li>
<li>常规模式键入 <code>&quot;=</code> 后光标将移动到命令行，此时输入计算表达式并回车，Vim 会执行该表达式，结果则能使用 <code>p</code> 输出到编辑区。</li>
<li>计算是一次性的，结果也只能输出一次。</li>
</ul>
</li>
<li>搜索模式寄存器（/）<ul>
<li>保存了上次常规模式中通过命令 <code>/</code> 搜索的内容。</li>
</ul>
</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://harttle.land/2016/07/25/vim-registers.html#header-8" target="_blank" rel="noopener">Vim 寄存器完全手册</a></li>
<li><a href="https://www.brianstorti.com/vim-registers" target="_blank" rel="noopener">Vim registers: The basics and beyond</a></li>
</ul>
]]></content>
      <categories>
        <category>日常应用</category>
        <category>编辑工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Vim</tag>
        <tag>寄存器</tag>
      </tags>
  </entry>
</search>
